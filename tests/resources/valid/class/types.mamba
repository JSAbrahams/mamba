class MyGeneric isa String
class MyType(def mut some_field: String)

type SomeState: MyClass when self.private_field > 2
type OtherState: MyClass when
    self.private_field  > 10
    self.private_field  < 200
    self.required_field < 50

type SuperInterface
    def bar: Int

type MyInterface: SuperInterface
    def required_field: Int
    def higher_order(self) -> int

# this class has no state
class MyClass(def my_field: Int, other_field: String := "Hello"): MyType(other_field), MyInterface
    def required_field: Int := 100
    def private mut private_field: Int := 20

    def fun_a(mut self: SomeState) => self.some_field := "my field is {self.required_field}"
    def private fun_b(self) => print "this function is private: {self.private_field}!"

    def some_higher_order(self, fun: Int -> Int) -> Int => return fun(self.my_field)
    def higher_order(self) -> Int => return self.some_higher_order(\x: Int => x * 2)
